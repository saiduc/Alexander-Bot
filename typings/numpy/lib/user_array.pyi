"""
This type stub file was generated by pyright.
"""

from numpy.core import arange, reshape

"""
Standard container-class for easy multiple-inheritance.

Try to inherit from the ndarray instead of using this class as this is not
complete.

"""
class container:
    """
    container(data, dtype=None, copy=True)

    Standard container-class for easy multiple-inheritance.

    Methods
    -------
    copy
    tostring
    byteswap
    astype

    """
    def __init__(self, data, dtype=..., copy=...) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def __array__(self, t=...):
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, index):
        ...
    
    def __setitem__(self, index, value):
        ...
    
    def __abs__(self):
        ...
    
    def __neg__(self):
        ...
    
    def __add__(self, other):
        ...
    
    __radd__ = ...
    def __iadd__(self, other):
        ...
    
    def __sub__(self, other):
        ...
    
    def __rsub__(self, other):
        ...
    
    def __isub__(self, other):
        ...
    
    def __mul__(self, other):
        ...
    
    __rmul__ = ...
    def __imul__(self, other):
        ...
    
    def __div__(self, other):
        ...
    
    def __rdiv__(self, other):
        ...
    
    def __idiv__(self, other):
        ...
    
    def __mod__(self, other):
        ...
    
    def __rmod__(self, other):
        ...
    
    def __imod__(self, other):
        ...
    
    def __divmod__(self, other):
        ...
    
    def __rdivmod__(self, other):
        ...
    
    def __pow__(self, other):
        ...
    
    def __rpow__(self, other):
        ...
    
    def __ipow__(self, other):
        ...
    
    def __lshift__(self, other):
        ...
    
    def __rshift__(self, other):
        ...
    
    def __rlshift__(self, other):
        ...
    
    def __rrshift__(self, other):
        ...
    
    def __ilshift__(self, other):
        ...
    
    def __irshift__(self, other):
        ...
    
    def __and__(self, other):
        ...
    
    def __rand__(self, other):
        ...
    
    def __iand__(self, other):
        ...
    
    def __xor__(self, other):
        ...
    
    def __rxor__(self, other):
        ...
    
    def __ixor__(self, other):
        ...
    
    def __or__(self, other):
        ...
    
    def __ror__(self, other):
        ...
    
    def __ior__(self, other):
        ...
    
    def __pos__(self):
        ...
    
    def __invert__(self):
        ...
    
    def __complex__(self):
        ...
    
    def __float__(self):
        ...
    
    def __int__(self) -> int:
        ...
    
    def __hex__(self):
        ...
    
    def __oct__(self):
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def copy(self):
        ""
        ...
    
    def tostring(self):
        ""
        ...
    
    def tobytes(self):
        ""
        ...
    
    def byteswap(self):
        ""
        ...
    
    def astype(self, typecode):
        ""
        ...
    
    def __array_wrap__(self, *args):
        ...
    
    def __setattr__(self, attr, value):
        ...
    
    def __getattr__(self, attr):
        ...
    


if __name__ == '__main__':
    temp = reshape(arange(10000), (100, 100))
    ua = container(temp)
    ua_small = ua[: 3, : 5]
