"""
This type stub file was generated by pyright.
"""

import os
from setup_common import *

NPY_RELAXED_STRIDES_CHECKING = os.environ.get('NPY_RELAXED_STRIDES_CHECKING', "1") != "0"
NPY_RELAXED_STRIDES_DEBUG = os.environ.get('NPY_RELAXED_STRIDES_DEBUG', "0") != "0"
NPY_RELAXED_STRIDES_DEBUG = NPY_RELAXED_STRIDES_DEBUG and NPY_RELAXED_STRIDES_CHECKING
class CallOnceOnly:
    def __init__(self) -> None:
        ...
    
    def check_types(self, *a, **kw):
        ...
    
    def check_ieee_macros(self, *a, **kw):
        ...
    
    def check_complex(self, *a, **kw):
        ...
    


def pythonlib_dir():
    """return path where libpython* is."""
    ...

def is_npy_no_signal():
    """Return True if the NPY_NO_SIGNAL symbol must be defined in configuration
    header."""
    ...

def is_npy_no_smp():
    """Return True if the NPY_NO_SMP symbol must be defined in public
    header (when SMP support cannot be reliably enabled)."""
    ...

def win32_checks(deflist):
    ...

def check_math_capabilities(config, moredefs, mathlibs):
    ...

def check_complex(config, mathlibs):
    ...

def check_ieee_macros(config):
    ...

def check_types(config_cmd, ext, build_dir):
    ...

def check_mathlib(config_cmd):
    ...

def visibility_define(config):
    """Return the define value to use for NPY_VISIBILITY_HIDDEN (may be empty
    string)."""
    ...

def configuration(parent_package=..., top_path=...):
    ...

if __name__ == '__main__':
    ...
